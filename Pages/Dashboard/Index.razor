@page "/dashboard"
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject IPartnerService PartnerService
@inject ILicenseService LicenseService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Dashboard</MudText>

    <AuthorizeView>
        <Authorized>
            @if (context.User.IsInRole("Admin"))
            {
                <AdminDashboard />
            }
            else if (context.User.IsInRole("Distributor"))
            {
                <DistributorDashboard PartnerId="@GetPartnerIdFromUser(context.User)" />
            }
            else if (context.User.IsInRole("Reseller"))
            {
                <ResellerDashboard PartnerId="@GetPartnerIdFromUser(context.User)" />
            }
            else
            {
                <TenantDashboard TenantId="@GetTenantIdFromUser(context.User)" />
            }
        </Authorized>
        <NotAuthorized>
            <MudAlert Severity="Severity.Error">You are not authorized to view this page.</MudAlert>
        </NotAuthorized>
    </AuthorizeView>
</MudContainer>

@code {
    private Guid? GetPartnerIdFromUser(System.Security.Claims.ClaimsPrincipal user)
    {
        var partnerIdClaim = user.Claims.FirstOrDefault(c => c.Type == "PartnerId");
        if (partnerIdClaim != null && Guid.TryParse(partnerIdClaim.Value, out var partnerId))
        {
            return partnerId;
        }
        return null;
    }

    private Guid? GetTenantIdFromUser(System.Security.Claims.ClaimsPrincipal user)
    {
        var tenantIdClaim = user.Claims.FirstOrDefault(c => c.Type == "TenantId");
        if (tenantIdClaim != null && Guid.TryParse(tenantIdClaim.Value, out var tenantId))
        {
            return tenantId;
        }
        return null;
    }
}
